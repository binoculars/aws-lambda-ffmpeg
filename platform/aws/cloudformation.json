{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Resizes a video and produces a thumbnail image",
	"Parameters": {
		"SourceBucketName": {
			"Type": "String",
			"AllowedPattern": "^[a-z]+[a-z0-9.\\-]+[a-z0-9]$",
			"MaxLength": "63",
			"Description": "The S3 source bucket"
		},
		"DestinationBucketName": {
			"Type": "String",
			"AllowedPattern": "^[a-z]+[a-z0-9.\\-]+[a-z0-9]$",
			"MaxLength": 63,
			"Description": "The S3 destination bucket"
		},
		"LambdaS3Bucket": {
			"Type": "String",
			"Description": "The S3 bucket in which the lambda function code is stored"
		},
		"LambdaS3Key": {
			"Type": "String",
			"AllowedPattern": ".*\\.zip",
			"Description": "The S3 key for the lambda function code"
		},
		"FFmpegArgs": {
			"Type": "String",
			"Description": "The arguments for the FFmpeg command"
		},
		"MimeTypes": {
			"Type": "String",
			"Description": "A JSON map of extensions to MIME types"
		},
		"UseGzip": {
			"Type": "String",
			"AllowedPattern": "^(true|false)$",
			"Description": "Whether to use gzip or not"
		},
		"VideoMaxDuration": {
			"Type": "String",
			"AllowedPattern": "^\\d+(\\.\\d+)*$",
			"Default": "30",
			"Description": "The maximum duration of a video, in seconds"
		},
		"ExecutionRoleManagedPolicyArn": {
			"Type": "String",
			"Default": "",
			"Description": "ARN of the external execution role policy"
		}
	},
	"Conditions": {
		"HasNoSourceBucketName": {
			"Fn::Equals": [
				{
					"Ref": "SourceBucketName"
				},
				""
			]
		},
		"HasNoDestinationBucketName": {
			"Fn::Equals": [
				{
					"Ref": "DestinationBucketName"
				},
				""
			]
		},
		"UseInternalExecutionRolePolicy": {
			"Fn::Equals": [
				{
					"Ref": "ExecutionRoleManagedPolicyArn"
				},
				""
			]
		}
	},
	"Resources": {
		"ExecutionRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"lambda.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"ManagedPolicyArns": [
					{
						"Fn::If": [
							"UseInternalExecutionRolePolicy",
							{
								"Ref": "AWS::NoValue"
							},
							{
								"Ref": "ExecutionRoleManagedPolicyArn"
							}
						]
					}
				],
				"Path": "/aws-lambda-ffmpeg/"
			}
		},
		"ExecutionRolePolicy": {
			"Type": "AWS::IAM::Policy",
			"DependsOn": "ExecutionRole",
			"Condition": "UseInternalExecutionRolePolicy",
			"Properties": {
				"PolicyName": "ExecutionRolePolicy",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"logs:CreateLogGroup",
								"logs:CreateLogStream",
								"logs:PutLogEvents"
							],
							"Resource": "arn:aws:logs:*:*:*"
						},
						{
							"Effect": "Allow",
							"Action": "s3:GetObject",
							"Resource": {
								"Fn::Join": [
									"",
									[
										"arn:aws:s3:::",
										{
											"Ref": "SourceBucketName"
										},
										"/*"
									]
								]
							}
						},
						{
							"Effect": "Allow",
							"Action": "s3:PutObject",
							"Resource": {
								"Fn::Join": [
									"",
									[
										"arn:aws:s3:::",
										{
											"Ref": "DestinationBucketName"
										},
										"/*"
									]
								]
							}
						}
					]
				},
				"Roles": [
					{
						"Ref": "ExecutionRole"
					}
				]
			}
		},
		"Lambda": {
			"Type": "AWS::Lambda::Function",
			"DependsOn": [
				"ExecutionRole"
			],
			"Properties": {
				"Code": {
					"S3Bucket": {
						"Ref": "LambdaS3Bucket"
					},
					"S3Key": {
						"Ref": "LambdaS3Key"
					}
				},
				"Role": {
					"Fn::GetAtt": [
						"ExecutionRole",
						"Arn"
					]
				},
				"Environment": {
					"Variables": {
						"DESTINATION_BUCKET": {
							"Ref": "DestinationBucketName"
						},
						"FFMPEG_ARGS": {
							"Ref": "FFmpegArgs"
						},
						"USE_GZIP": {
							"Ref": "UseGzip"
						},
						"MIME_TYPES": {
							"Ref": "MimeTypes"
						},
						"VIDEO_MAX_DURATION": {
							"Ref": "VideoMaxDuration"
						}
					}
				},
				"Timeout": 30,
				"Handler": "aws/index.handler",
				"Runtime": "nodejs6.10",
				"MemorySize": 1536
			}
		},
		"LambdaPermission": {
			"Type": "AWS::Lambda::Permission",
			"DependsOn": [
				"Lambda"
			],
			"Properties": {
				"Action": "lambda:invokeFunction",
				"FunctionName": {
					"Fn::GetAtt": [
						"Lambda",
						"Arn"
					]
				},
				"Principal": "s3.amazonaws.com",
				"SourceAccount": {
					"Ref": "AWS::AccountId"
				},
				"SourceArn": {
					"Fn::Join": [
						"",
						[
							"arn:aws:s3:::",
							{
								"Ref": "SourceBucketName"
							}
						]
					]
				}
			}
		},
		"SourceBucket": {
			"Type": "AWS::S3::Bucket",
			"DependsOn": [
				"Lambda",
				"LambdaPermission"
			],
			"Properties": {
				"BucketName": {
					"Fn::If": [
						"HasNoSourceBucketName",
						{
							"Ref": "AWS::NoValue"
						},
						{
							"Ref": "SourceBucketName"
						}
					]
				},
				"NotificationConfiguration": {
					"LambdaConfigurations": [
						{
							"Event": "s3:ObjectCreated:*",
							"Function": {
								"Fn::GetAtt": [
									"Lambda",
									"Arn"
								]
							}
						}
					]
				}
			}
		},
		"DestinationBucket": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"BucketName": {
					"Fn::If": [
						"HasNoDestinationBucketName",
						{
							"Ref": "AWS::NoValue"
						},
						{
							"Ref": "DestinationBucketName"
						}
					]
				}
			}
		}
	}
}
